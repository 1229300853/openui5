/* ================================= */
/* CSS for control sap.m/MultiInput  */
/* Base theme                        */
/* ================================= */

.sapMMultiInputBorder {
	box-sizing: border-box;
	position: relative;
	white-space: nowrap;
	border-radius: 0;
	background: @sapUiFieldBackground;
	border: 1px solid @sapUiFieldBorderColor;
	height: 2.5rem;
	padding-left: 0.75rem;
}

.sapMMultiInputInputContainer {
	box-sizing: border-box;
}

// on the desktop we hide the overflow
html.sap-desktop .sapMMultiInputBorder {
	overflow: hidden;
}

.sapMMultiInput .sapMInputValHelp {
	display: inline-block;
	position: static;
}

// in general tokens in multi-line or on phone are not visible
.sapMMultiInput.sapMMultiInputMultiLine .sapMToken,
html.sap-phone .sapMMultiInput .sapMToken {
	display: none;
}

// however tokens in multi-line or phone in read-only multiinput are visible
.sapMMultiInput.sapMMultiInputMultiLine.sapMInputBaseReadonly .sapMToken,
html.sap-phone .sapMMultiInput.sapMInputBaseReadonly .sapMToken {
	display: inline-block;
}

// the last token in multi-line mode or on phone is always visible
.sapMMultiInput.sapMMultiInputMultiLine .sapMToken:last-child,
html.sap-phone .sapMMultiInput .sapMToken:last-child {
	display: inline-block;
}

// tokens when multi-line is open are also visible
.sapMMultiInput.sapMMultiInputMultiLine .sapMMultiInputMultiModeBorder .sapMToken {
	display: inline-block;
}

// we need this selector to avoid being overwritten by the input.css
.sapUiSizeCompact .sapMMultiInput .sapMInputValHelp {
	display: inline-block;
	position: static;
}

.sapMMultiInput .sapMMultiInputMultiModeInputContainer .sapMInputValHelp,
.sapUiSizeCompact .sapMMultiInput .sapMMultiInputMultiModeInputContainer .sapMInputValHelp {
	position: absolute;
	top: 0;
	right: 0;
}

.sapMMultiInput .sapMMultiInputInputContainer {
	position: absolute;
	top: 0;
	right: 0;
}

.sapMMultiInputShadowDiv {
	display: inline;
	visibility: collapse;
	position: absolute;
	top: 0;
	left: 0;
	font-size: @sapMFontMediumSize;
	font-family: @sapUiFontFamily;
}

.sapMMultiInput.sapMInputBaseReadonly .sapMMultiInputInputContainer {
	position: absolute;
}

.sapMMultiInputInputContainer.sapMMultiInputMultiModeInputContainer {
	position: static;
}

// focus styles
html.sap-desktop .sapMMultiInput.sapMFocus .sapMInputBaseInner:focus {
	outline: none;
}

.sapMMultiInput .sapMInputBaseInner:not(.sapMInputBaseReadonlyInner):not(.sapMInputBaseStateInner):not(.sapMInputBaseDisabledInner):hover {
	background: transparent;
}

html.sap-phone .sapMToken:focus,
html.sap-tablet:not(.sap-desktop) .sapMToken:focus {
	outline-color: transparent;
}

.sapMMultiInput:not(.sapMInputBaseReadonly)  .sapMInputValHelp > .sapMInputValHelpInner:hover,
.sapMMultiInput:not(.sapMInputBaseReadonly)  .sapMInputValHelp > .sapMInputValHelpInner:focus {
	background-color: @sapUiButtonLiteHoverBackground;
}

.sapMMultiInput:not(.sapMInputBaseReadonly)  .sapMInputValHelp > .sapMInputValHelpInner:active {
	background-color: @sapUiButtonLiteActiveBackground;
	color: @sapUiButtonActiveTextColor;
}

.sapMInputBaseReadonly .sapMMultiInputBorder {
	background: @sapUiFieldReadOnlyBackground;
	border-color: @sapUiFieldReadOnlyBorderColor;
}



.sapMMultiInputNarrowBorder {
	padding-left: 0.375rem;
}

html.sap-desktop .sapMMultiInputMultiModeBorder,
html.sap-tablet .sapMMultiInputMultiModeBorder {
	height: auto;
	max-height: 10.375rem;
	overflow-y: auto;
	z-index: 11;
}

.sapMMultiInputIndicator {
	display: inline-block;
	vertical-align: top;
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
	font-size: @sapMFontMediumSize;
}

.sapUiSizeCompact .sapMMultiInputBorder {
	height: 1.625rem;
	padding-left: 0.25rem;
}

.sapMMultiInputMultiModeBorder .sapMInputBaseInner {
	border: 1px;
}

html.sap-desktop .sapUiSizeCompact .sapMMultiInputMultiModeBorder,
html.sap-tablet .sapUiSizeCompact .sapMMultiInputMultiModeBorder {
	height: auto;
	max-height: 7rem;
	overflow-y: auto;
}

.sapMInputBaseReadonly .sapMMultiInputBorder:hover {
	border-color: @sapUiFieldReadOnlyBorderColor;
}

.sapMInputFocused:not(.sapMInputBaseReadonly) .sapMMultiInputBorder {
	border-color: @sapUiFieldFocusBorderColor;
}

.sapMInput:not(.sapMInputBaseDisabled) .sapMMultiInputBorder:hover {
	border-color: @sapUiFieldHoverBorderColor;
}

.sapMInputBase.sapMMultiInput.sapMInputBaseWarning .sapMMultiInputBorder {
	border-color: @sapUiFieldWarningColor;
}

.sapMInputBase.sapMMultiInput.sapMInputBaseError .sapMMultiInputBorder {
	border-color: @sapUiFieldInvalidColor;
}

.sapMInputBase.sapMMultiInput.sapMInputBaseSuccess .sapMMultiInputBorder {
	border-color: @sapUiFieldSuccessColor;
}

.sapMMultiInputInputContainer > input, .sapMMultiInputShadowDiv {
	border: 0 transparent;
	min-width: 2.4rem;
	background: transparent;
}

.sapMMultiInput > .sapMInputBasePlaceholder {
	width: calc(100% - 2.375rem);
}

.sapUiSizeCompact .sapMMultiInputInputContainer > input, .sapUiSizeCompact .sapMMultiInputShadowDiv {
	min-width: 1.9rem;

	// we need specific height here since we cannot take that from class sapMInputBaseInner as we do it in the non-compact mode
	height: 1.5rem;
}

.sapMMultiInput .sapMInputBaseInner {
	// we reduce the standard padding from sapMInputBaseInner (which is too large for our purposes)
	padding-left: 0;
	padding-right: 0.125rem;
}

.sapUiSizeCompact  .sapMMultiInput .sapMInputBaseInner {
	padding-left: 0;
	padding-right: 0.125rem;
}

.sapUiSizeCompact .sapMMultiInput > .sapMInputBasePlaceholder {
	width: calc(100% - 1.5rem);
}