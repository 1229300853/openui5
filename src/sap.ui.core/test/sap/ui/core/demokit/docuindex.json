{
	"explored" : {
		"entitiesDefaults" : {
			"appComponent" : "CA-UI5",
			"formFactors" : "-"
		},
		"samplesRef" : {
			"namespace" : "sap.ui.core.sample",
			"ref" : "test-resources/sap/ui/core/demokit/sample"
		},
		"entities" : [
			{
				"id" : "sap.ui.core.Control",
				"name" : "Control",
				"category" : "Display",
				"since" : "1.0",
				"samples" : [ "sap.ui.core.sample.ControlBusyIndicator" ]
			},
			{
				"id" : "sap.ui.core.HTML",
				"name" : "HTML",
				"category" : "Display",
				"since" : "1.0",
				"samples" : [ "sap.ui.core.sample.Html" ]
			},
			{
				"id" : "sap.ui.core.Icon",
				"name" : "Icon",
				"category" : "Display",
				"since" : "1.12",
				"samples" : [ "sap.ui.core.sample.Icon" ]
			},
			{
				"id" : "sap.ui.core.mvc.XMLView",
				"name" : "XMLView",
				"category" : "Display",
				"since" : "1.26",
				"samples" : [
					"sap.ui.core.sample.ViewTemplate.constants",
					"sap.ui.core.sample.ViewTemplate.if_sample",
					"sap.ui.core.sample.ViewTemplate.scenario"
				]
			},
			{
				"id" : "sap.ui.test.Opa5",
				"name" : "OPA5",
				"category" : "Testing",
				"since" : "1.24",
				"samples" : [ 
					"sap.ui.core.sample.OpaMatchers",
					"sap.ui.core.sample.OpaById",
					"sap.ui.core.sample.OpaReuse",
					"sap.ui.core.sample.OpaDynamicWait"
				]
			},
			{
				"id" : "sap.ui.core.theming",
				"name" : "Theming",
				"category" : "Theming",
				"since" : "0",
				"samples" : [
					"sap.ui.core.sample.ThemeCustomClasses"
				]
			}
		],
		"samples" : [
			{
				"id": "sap.ui.core.sample.ControlBusyIndicator",
				"name": "Control Busy Indicator",
				"description": "A control's busy indicator can be used to block parts of the screen until an operation has finished. In this example we block the content of only one out of two panels."
			},
			{
				"id": "sap.ui.core.sample.Html",
				"name": "HTML",
				"description": "With the HTML controls you can easily embed any kind of HTML content into your UI5 mobile application."
			},
			{
				"id": "sap.ui.core.sample.Icon",
				"name": "Icon",
				"description": "Built with an embedded font, icons scale well, and can be altered with CSS. They can also fire a press event. See the Icon Explorer for more icons."
			},
			{
				"id": "sap.ui.core.sample.ViewTemplate.constants",
				"name": "XMLView Templating: constant expressions",
				"description": "Simple example for XML View Templating with OData v4 constant expressions"
			},
			{
				"id": "sap.ui.core.sample.ViewTemplate.if_sample",
				"name": "XMLView Templating: if",
				"description": "Simple example for XML View Templating with the if/then/else templating instruction"
			},
			{
				"id": "sap.ui.core.sample.ViewTemplate.scenario",
				"name": "XMLView Templating: demo scenario",
				"description": "Complete demo scenario for XML View Templating based on OData V4 annotations"
			},
			{
				"id": "sap.ui.core.sample.OpaMatchers",
				"name": "Using Matchers",
				"description": "Matchers are used to retrieve controls that have to match a condition, eg: Property matching a value"
			},
			{
				"id": "sap.ui.core.sample.OpaById",
				"name": "Finding controls by id",
				"description": "OPA finds a control by its id, triggers a tap and then finds multiple controls by their ids"
			},
			{
				"id": "sap.ui.core.sample.OpaReuse",
				"name": "How to structure your OPA tests",
				"description": "If you have complex apps you should build reuse functions to make your OPA tests maintainable."
			},
			{
				"id": "sap.ui.core.sample.OpaDynamicWait",
				"name": "How to write nested actions",
				"description": "If you have complex control structures you are able to add actions based on the result of previous actions."
			},
			{
				"id" : "sap.ui.core.sample.ThemeCustomClasses",
				"name" : "Theme-dependent CSS-classes",
				"description" : "'sapTheme'-prefixed CSS classes for theme-dependent styling of custom HTML/Controls" 
			}
		]
	}
}
